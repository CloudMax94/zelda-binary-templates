struct ZSceneHeader;
struct ZSceneHeaderCommand;
struct ZRoom;
struct ZScene;

void NotImplemented( ZSceneHeaderCommand &zshc ){
    local string s;
    SPrintf(s, "Incomplete Command Present: %s", ZSceneHeaderCommandRead(zshc));
    EXWarning(s);
    SetBackColor( cRed );
}

typedef struct {
    ZFileSystemRange room;
} ZRoomList;

typedef struct {
    ubyte numPoints;
    ubyte zeroes[3];
    ZBankPointer off;
    if( off.zb.bankNo == 0x02 ){
        local uint64 returnTo = FTell();
        FSeek(headerStart + off.offset);
        ZVector nodes[numPoints];
        FSeek(returnTo);
    } else {
        Warning("External Bank");
    }
} ZPathList;



typedef struct {
    uint startPosition; // references room start position list
    uint roomToLoad; // TODO: Find room references?
} ZEntrance;

typedef struct {
    // Usually 0x462D39
    ZColor ambient;
    ZColor diffuse1Color;
    ZByteVector diffuse1Dir;
    ZColor diffuse2Color;
    ZByteVector diffuse2Dir;
    ZColor fogColor;
    ushort fogStart; // & 0x3FF ?
    ushort drawDistance;
} ZEnvironmentSettings;

typedef struct ( ubyte &bankType ) { //ZSceneHeaderCommand
    local uint64 hPos = FTell();
    ubyte commandType;
    switch(commandType){
        case 0x00:
            SetBackColor( cOrange );
            // Scenes, Not Optional
            ubyte numStarts;
            ubyte zeroes[2];
            // Actor List
            ZBankPointer listOffset;
            if( listOffset.zb.bankNo == bankType ){
                local uint64 returnTo = FTell();
                FSeek(headerStart + listOffset.offset);
                ZActorList starts[numStarts];
                FSeek(returnTo);
            } else {
                Warning("External Bank");
            }
            break;
        case 0x01:
            SetBackColor( cDkRed );
            // Actor List
            ubyte numActors;
            ubyte zeroes[2];
            ZBankPointer listOffset;
            if( listOffset.zb.bankNo == bankType ){
                local uint64 returnTo = FTell();
                FSeek(headerStart + listOffset.offset);
                ZActorList actors[numActors];
                FSeek(returnTo);
            } else {
                Warning("External Bank");
            }
            break;
        case 0x02:
            SetBackColor( cLtRed );
            // MM:Cameras
            ubyte numCameras;
            ubyte zeroes[2];
            ZBankPointer listOffset;
            if( listOffset.zb.bankNo == bankType ){
                local uint64 returnTo = FTell();
                FSeek(headerStart + listOffset.offset);
                ZCameraData cameras[numCameras]<optimize=false>;
                FSeek(returnTo);
            } else {
                Warning("External Bank");
            }
            break;
        case 0x03:
            SetBackColor( cGreen );
            // Collision Hull
            ubyte zeroes[3];
            ZBankPointer listOffset;
            if( listOffset.zb.bankNo == bankType ){
                local uint64 returnTo = FTell();
                FSeek(headerStart + listOffset.offset);
                ZCollisionHeader collisionHead;
                FSeek(returnTo);
            } else {
                Warning("External Bank");
            }
            // TODO: Inline file. http://wiki.cloudmodding.com/oot/Collision_Format
            break;
        case 0x04:
            SetBackColor( cDkGreen );
            // Rooms
            ubyte numRooms;
            ubyte zeroes[2];
            ZBankPointer listOffset;
            if( listOffset.zb.bankNo == bankType ){
                local uint64 returnTo = FTell();
                local uint64 i = 0;
                FSeek(headerStart + listOffset.offset);
                ZFileSystemRange rooms[numRooms];
                //ZRoomList rooms[numRooms];
                for( i = 0; i < numRooms; i++){
                    if(rooms[i].start >= FileSize()){
                        EXWarning("Tried to reach a room beyond us. (Are we in a scene?)");
                    } else {
                        FSeek(rooms[i].start);
                        Printf("0x%Lx < having a party >", headerStart + rooms[i].start);
                        ZScene myster;
                    }
                }
                FSeek(returnTo);
            } else {
                local string s;
                SPrintf(s, "External Bank (%d is not %d)", listOffset.zb.bankNo, bankType);
                EXWarning(s);
            }
            break;
//            return "";
        case 0x05:
            SetBackColor( cLtGreen );
            NotImplemented(this);
            ubyte idk[7];
            break;
//            return "Weather Info";
        case 0x06:
            SetBackColor( cBlue );
            NotImplemented(this);
            //local string s;
            //SPrintf(s, "Incomplete Command Present: %s", ZSceneHeaderCommandRead(this));
            //EXWarning(s);
            // Entrance List
            ubyte zeroes[3];
            ZBankPointer listOffset;
            // TODO: Expand entrance table.
            // TODO: Cross-reference number of start positions.
            break;
        case 0x07:
            SetBackColor( cDkBlue );
            // Special Objects
            ubyte zeroes[3];
            uint referenceObject;
            // TODO: Cross-reference to position in object table.
            break;
        case 0x08:
            SetBackColor( cLtBlue );
            // Room Behavior
            ubyte unknown1 : 5;
            ubyte isBossRoom : 1;
            ubyte disableAButtonJump : 1;
            ubyte disableSunSong : 1;
            ubyte zeroes[4];
            ubyte shadowTempleFlags;
            /*
            00 - shadow temple room 1
            01 - shadow temple rooms 0 and 2
            */
            ubyte idleModifier;
            /*
            00 - Link tends to stand in place and glance back at the player
            01 - Link's cold sneeze
            02 - Link wipes his head
            03 - Triggers the Heat timer! Camera seems to move in and out rapidly, and ever so slightly for the "heat" effect
            04 - Link stretches and yawns?
            06 - ?
            07 - Bends over and gasps for breath
            09 - Brandishes sword even if not equipped
            0A - Re-adjusts his tunic?
            ??
            FF - Link hops on Epona (even as a child)
            */
            break;
        case 0x09:
            SetBackColor( cPurple );
            ubyte idk[7];
            break;
//            return "Unused Header Command";
        case 0x0A:
            SetBackColor( cDkPurple );
            // Mesh Definition
            ubyte zeroes[3];
            ZBankPointer listOffset;
            if( listOffset.zb.bankNo == bankType ){
                local uint64 returnTo = FTell();
                FSeek(headerStart + listOffset.offset);
                ZMeshHeader meshHead( headerStart, bankType );
                FSeek( returnTo );
                //breakout = 1;
            } else {
                Printf("BOGUS %d", bankType);
                EXWarning("External Dank");
            }
            break;
//            return "Mesh Definition";
        case 0x0B:
            SetBackColor( cDkPurple );
            // Object List
            ubyte numObjects;
            ubyte zeroes[2];
            ZBankPointer listOffset;
            if( listOffset.zb.bankNo == bankType ){
                local uint64 returnTo = FTell();
                FSeek(headerStart + listOffset.offset);
                struct {
                    ushort objectId;
                } ZObjectList[numObjects];
                FSeek(returnTo);
            } else {
                Warning("External Bank");
            }
            break;
            ubyte idk[7];
            break;
//            return "";
        case 0x0C:
            SetBackColor( cLtPurple );
            ubyte idk[7];
            break;
//            return "Unused Environment Settings";
        case 0x0D:
            SetBackColor( cAqua );
            // Pathways
            ubyte zeroes[3];
            ZBankPointer listOffset;
            if( listOffset.zb.bankNo == bankType ){
                local uint64 returnTo = FTell();
                FSeek(headerStart + listOffset.offset);
                ZPathList paths;
                FSeek(returnTo);
            } else {
                Warning("External Bank");
            }
            break;
//            return "";
        case 0x0E:
            SetBackColor( cDkAqua );
            ubyte idk[7];
            break;
//            return "Transition Actor List";
        case 0x0F:
            SetBackColor( cLtAqua );
            // Environment Settings
            ubyte numEnvSets;
            ubyte zeroes[2];
            ZBankPointer listOffset;
            if( listOffset.zb.bankNo == bankType ){
                local uint64 returnTo = FTell();
                FSeek(headerStart + listOffset.offset);
                ZEnvironmentSettings envSets[numEnvSets];
                FSeek(returnTo);
            } else {
                Warning("External Bank");
            }
            break;
        case 0x10:
            SetBackColor( cYellow );
            // Time Settings
            ubyte zeroes1[3];
            ushort startTime;
            //0xFFFF == current time
            byte timeSpeed;
            ubyte zeroes2;
            break;
        case 0x11:
            SetBackColor( cDkYellow );
            // Skybox Settings
            //TODO: Inline cast and fog
            ubyte zeroes1[3];
            ubyte skyboxNumber; //TODO: Map known skyboxes
            ubyte zeroes2 : 4;
            ubyte cast : 4;
            /*
            Affects the sun's lens flare, and skybox 1 will load sky/clouds.

            0 = Sunny
            1 = Cloudy
            */
            ubyte zeroes3 : 4;
            ubyte fog : 4;
            ubyte zeroes4;
            /*
            0  = None
            1+ = A lot of fog.
            */
            break;
//            return "";
        case 0x12:
            SetBackColor( cLtYellow );
            // Skybox Modifier
            ubyte zeroes1[3];
            ubyte disableSkybox;
            /*
            00 = skybox
            01+= no skybox
            */
            ubyte unknown;
            /*
            01 = set in Z2_WITCH_SHOP_room_14
            */
            ubyte zeroes2[2];
            break;
//            return "";
        case 0x13:
            SetBackColor( cDkGray );
            ubyte idk[7];
            break;
//            return "Exit List";
        case 0x14:
            SetBackColor( cGray );
            // End Marker
            ubyte zeroes[7];
            breakout = 1;
            break;
        case 0x15:
            SetBackColor( cSilver );
            // Sound Settings
            ubyte reverb; //TODO: Histogram of usage.
            char zeroes[4];
            ubyte nightSFX; //TODO: Write resolver. http://wiki.cloudmodding.com/mm/Music_Values#Nighttime_SFX
            ubyte track;
            break;
        case 0x16:
            SetBackColor( cLtGray );
            // Sound Settings pt 2: Echo
            ubyte zeroes[6];
            ubyte echo;
            break;
        case 0x17:
            // Cutscenes
            local uint i;
            ubyte numCutscenes;
            ubyte zeroes[2];
            ZBankPointer listOffset;
            if( listOffset.zb.bankNo == bankType ){
                local uint64 returnTo = FTell();
                FSeek(headerStart + listOffset.offset);
                ZCutsceneHeader cutscenes(headerStart)[numCutscenes]<optimize=false>;
                FSeek(returnTo);
            } else {
                Warning("External Bank");
            }
            break;
        case 0x18:
            // "Alternate Headers";
            // points to all existing headers other than itself
            // Scenes, Not Optional
            ubyte zeroes[3];
            // Actor List
            ZBankPointer listOffset;
            if( listOffset.zb.bankNo == bankType ){
                local uint64 returnTo = FTell();
                FSeek(headerStart + listOffset.offset);
                local uint64 numAltHeaders = 9;
                local uint64 i = 0;
                ZBankPointer altHeaderOffsets[9]<optimize=false>;
                for( i = 0; i < numAltHeaders; i++){
                    if( altHeaderOffsets[i].zb.bankNo == bankType ){
                        FSeek(headerStart + altHeaderOffsets[i].offset);
                        ZSceneHeader myster( bankType );
                    } else {
                        Warning("External Bank");
                    }
                };
                FSeek(returnTo);
            } else {
                Warning("External Bank");
            }
            break;
        case 0x19:
            ubyte cameraMovement; //TODO: Document values.
            ubyte zeroes[5];
            ubyte worldMapHighlightRegion; //TODO: Write resolver. http://wiki.cloudmodding.com/mm/Scenes_and_Rooms#Camera_Settings
            break;
//            return "Camera Settings and World Map";
        case 0x1A:
            // Unknown 0x1A Scene Command
            ubyte numUnknown;
            ubyte zeroes[2];
            ZBankPointer listOffset;
            if( listOffset.zb.bankNo == bankType ){
                local uint64 returnTo = FTell();
                FSeek(headerStart + listOffset.offset);
                uchar mystery[16];
                FSeek(returnTo);
            } else {
                Warning("External Bank");
            }
            break;
        case 0x1B:
            // Unknown 0x1B Scene Command
            ubyte numUnknown;
            ubyte zeroes[2];
            ZBankPointer listOffset;
            if( listOffset.zb.bankNo == bankType ){
                local uint64 returnTo = FTell();
                FSeek(headerStart + listOffset.offset);
                struct {
                    short unknown[8];
                } mysteries[numUnknown]<optimize=false>;
                FSeek(returnTo);
            } else {
                Warning("External Bank");
            }
            break;
        case 0x1C:
            // Unknown 0x1C Scene Command
            ubyte zeroes[3];
            ZBankPointer listOffset;
            if( listOffset.zb.bankNo == bankType ){
                local uint64 returnTo = FTell();
                FSeek(headerStart + listOffset.offset);
                ZBankPointer mysteryBank;
                if( listOffset.zb.bankNo == bankType ){
                    local uint64 returnTo2 = FTell();
                    FSeek(headerStart + mysteryBank.offset);
                    struct {
                        uchar unknown[4];
                    } mysteryData[3];
                    FSeek(returnTo2);
                } else {
                    Warning("External Bank");
                }
                FSeek(returnTo);
            } else {
                Warning("External Bank");
            }
            break;
        case 0x1D:
            // Unknown 0x1D Scene Command
            ubyte numUnknown;
            ubyte zeroes[2];
            ZBankPointer listOffset;
        case 0x1E:
            // Unknown 0x1E Scene Command
            ubyte zeroes[3];
            ZBankPointer listOffset;
            if( listOffset.zb.bankNo == bankType ){
               local uint64 returnTo = FTell();
               FSeek(headerStart + listOffset.offset);
               SetBackColor( cLtBlue );
               ZBankPointer mysteryBank[3]<optimize=false>;
               SetBackColor( cDkGreen );
               FSeek(returnTo);
            } else {
               Warning("External Bank");
            }
            break;
        default:
            ubyte numUnknown;
            ubyte zeroes[2];
            ZBankPointer listOffset;
//            local string s;
//            SPrintF( s, "Unknown 0x%LX Scene Command", tByte);
//            return s;
    }; // switch()
    FSeek(hPos+8);
} ZSceneHeaderCommand<read=ZSceneHeaderCommandRead>; //typedef struct 

string ZSceneHeaderCommandRead(ZSceneHeaderCommand &zshc){
    switch(zshc.commandType){
        case 0x00:
            return "Start Positions List";
        case 0x01:
            return "Actor List";
        case 0x02:
            return "MM:Cameras";
        case 0x03:
            return "Collision Header";
        case 0x04:
            return "Maps";
        case 0x05:
            return "Weather Info";
        case 0x06:
            return "Entrance List";
        case 0x07:
            return "Special Objects";
        case 0x08:
            return "Room Behavior";
        case 0x09:
            return "Unused Header Command";
        case 0x0A:
            return "Mesh Definition";
        case 0x0B:
            return "Object List";
        case 0x0C:
            return "Unused Environment Settings";
        case 0x0D:
            return "Pathways";
        case 0x0E:
            return "Transition Actor List";
        case 0x0F:
            return "Environment Settings";
        case 0x10:
            return "Time Settings";
        case 0x11:
            return "Skybox Settings";
        case 0x12:
            return "Skybox Modifier";
        case 0x13:
            return "Exit List";
        case 0x14:
            return "End Marker";
        case 0x15:
            return "Sound Settings";
        case 0x16:
            return "Sound Settings: Echo";
        case 0x17:
            return "Cutscenes";
        case 0x18:
            return "Alternate Headers";
        case 0x19:
            return "Camera Settings and World Map";
        default:
            local string s;
            SPrintf( s, "0x%LX? Header Command", zshc.commandType);
            return s;
    }
};