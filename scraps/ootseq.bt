/*
4	Audiobank	00019030	00044DF0	
5	Audioseq	00044DF0	00094870	
6	Audiotable	00094870	004E5C00	
*/

/*
MM VALUES
local uint64 aBANK = 0x00019030;
local uint64 aSEQ  = 0x00044DF0;
local uint64 aTAB  = 0x00094870;
*/

local uint64 aBANK = 0x00019030;
local uint64 aSEQ  = 0x00044DF0;
local uint64 aTAB  = 0x00094870;

struct SeqHead;
struct ChanHead;
struct MusDat;

local uint doWalkThrough = 0;

FSeek(0xBCC6A0);
SetBackColor( cBlue );
local uint64 seqStart = FTell();
ushort SeqCount;
ubyte padded[14];
SetBackColor( cDkGreen );

local ushort seqNo = 0;
struct PointerTableEntry {
    uint relative_offset;     /* offset relative to start of audioseq file */
    uint length;              /* length in bytes */
    uint seq_type;            /* 0x02000000, 0x02010000, 0x02020000 */
    uint padding;             /* NULL */

    local uint64 returnTo = FTell();

    SetBackColor( cPurple );
    FSeek(aSEQ + relative_offset);

    SeqHead datum(aSEQ + relative_offset, length);
    FSeek(returnTo);

    seqNo++;
} SequencePointers[SeqCount]<optimize=false>;


//FSeek(0xBCC270);

typedef struct (uint noArgs){
    ubyte command;
    if(noArgs > 0){
        ubyte args[noArgs];
    }
} SHCommand;

typedef struct (uint64 start, uint64 length){
    /*
        Sequence Header Commands[edit]
        
        Note: some sequences have the following data after the first four bytes of their sequence header:
        D7FFFF 8776CCFF7786F3 vv F2 ww C801F3 xx [C801FA yyyy] FB zzzz
        v, w and x are unknowns, y and z seem to be pointers to 9x commands for different parts of the sequence within the sequence header. The part in square brackets is repeated in some sequences. Its purpose is currently unknown but it may be to do with continuing playback mid-sequence after returning to the area from a house/shop.
        
        https://github.com/sauraen/seq64/blob/master/romdesc/mm_info.xml
        https://sites.google.com/site/messiaen64/toads-music-incomplete
        https://sites.google.com/site/messiaen64/differences-between-sseq-nds-and-mario64-seq-format
        https://sites.google.com/site/messiaen64/mario-64-sequenced-music-specification
    */
    local ubyte op;
    local int breakout = 0;
    local uint itercount = 0;
    local uint iterlimit = 16;
    local string warn;
    local byte localseek;
    while ( breakout == 0 ){
        op = ReadUByte(FTell());
        localseek = 0;
        switch( op ){
            case 0xCC:
                SHCommand CC(2);
                // yyxx
                // Unknown. yy starts at zero and increases each time the command appears, xx is (always?) 73.
                break;
            case 0xD3:
                SHCommand D3(1);
                // xx
                //Seems to be something to do with the sequence type or format; for Super Mario 64, xx is usually 80, for Zelda 64, xx is usually 20.
                break;
            case 0xD5:
                SHCommand D5(1);
                // xx
                // Unknown. xx usually takes the value of 32. For sequences that don't play any music xx is 46.
                break;
            case 0xD6:
                SHCommand D6(2);
                // xxxx
                // Disables channels given by xxxx.
                break;
            case 0xD7:
                SHCommand D7(2);
                // xxxx
                // Enables channels given by xxxx (boolean, each channel is one bit).
                break;
            case 0xDB:
                SHCommand DB(1);
                // xx
                // Master volume control, xx is the volume.
                break;
            case 0xDD:
                SHCommand DD(1);
                // xx
                // Tempo control, xx is the tempo value in beats per minute.
                break;
            case 0x90:
            case 0x91:
            case 0x92:
            case 0x93:
            case 0x94:
            case 0x95:
            case 0x96:
            case 0x97:
            case 0x98:
            case 0x99:
            case 0x9A:
            case 0x9B:
            case 0x9C:
            case 0x9D:
            case 0x9E:
            case 0x9F:
                SHCommand NINEX(2);
                // yyyy
                // Points to a channel header offset. 9X is the channel number (0 - F) and yyyy is the offset of that channel's header relative to the start of the sequence file.
                break;
            case 0xFB:
                SHCommand FB(2);
                // xxxx
                // Offset to loop from, xxxx is the offset relative to the start of the sequence file.
                break;
            case 0xFD:
                localseek = ReadUByte(FTell()+1);
                if( localseek > 0x7F ){
                    SHCommand FD(2);
                } else {
                    SHCommand FD(1);
                }
                // FD xx / FD yyyy
                // Timestamp (number of 'ticks' to wait before the next command is read, relative to tempo), variable length. If xx goes above 7F, add 8000 to it to get yyyy.
                break;
            case 0xFF:
                SHCommand FF(0);
                breakout = 1;
                break;
            default:
                SHCommand IDK(1);
                SPrintf(warn, "\nWARNING: Unknown SeqHead opcode (0x%Lx)!", op);
                Printf(warn);
                break;
        }
        itercount++;
        if( FTell() >= start+length ){
            breakout = 1;
        }
        /*
        if( itercount >= iterlimit ){
            breakout = 1;
        }
        */
    }
} SeqHead;

typedef struct (uint64 start, uint64 length){
    /*
        Channel Header Commands 
    */
    local ubyte op;
    local int breakout = 0;
    local uint itercount = 0;
    local uint iterlimit = 16;
    local string warn;
    while ( breakout == 0 ){
        op = ReadUByte(FTell());
        switch( op ){
            case 0xC1:
                SHCommand C1(1);
                // C1 xx
                // Sets the instrument number, xx, to be used for the current channel.
                break;
            case 0xC1:
                SHCommand C1(1);
                // C2 xx
                // Transposition, signed. xx is the number of semitones to transpose by.
                break;
            case 0xC4:
                SHCommand C4(0);
                // Initialises the channel for music playback.
                break;
            case 0xD3:
                SHCommand D3(2);
                // D3 xx (yy)
                // Pitch bend amount, signed, value of xx. yy is a timestamp used between control changes.
                break;
            case 0xD4:
                SHCommand D4(1);
                // D4 xx
                // Effects level (echo). xx is the effect amount.
                break;
            case 0xD8:
                SHCommand D8(2);
                // D8 xx (yy)
                // Vibrato amount, value of xx. Higher values can produce odd sounds. yy is a timestamp used between control changes.
                break;
            case 0xDD:
                SHCommand DD(2);
                // DD xx
                // Channel pan. xx is the pan amount, 00 = hard left, 3F = centre, 7F = hard right.
                break;
            case 0xDF:
                SHCommand DF(2);
                // xx (yy)
                // Channel volume. xx is the volume value, yy is a timestamp used between control changes (when the volume is changing constantly).
                break;
            case 0xE9:
                SHCommand E9(1);
                // E9 xx
                // Priority. Unknown how it is used, takes the value of xx.
            case 0x80: // unused?
            case 0x81: // unused?
            case 0x82: // unused?
            case 0x83: // unused?
            case 0x84: // unused?
            case 0x85: // unused?
            case 0x86: // unused?
            case 0x87: // unused?
            case 0x88:
            case 0x89:
            case 0x8A:
            case 0x8B:
            case 0x8C: // unused?
            case 0x8D: // unused?
            case 0x8E: // unused?
            case 0x8F: // unused?
                SHCommand EIGHTX(2);
                // 8x yyyy
                // Points to music data to be played on the current channel. x is the 'note layer' to be used (8 - B), up to a maximum of four note layers can be loaded per channel. yyyy is the offset of the music data to be played, relative to the start of the sequence file.
                break;
            case 0xFB:
                SHCommand FB(2);
                // xxxx
                // Offset to loop from, xxxx is the offset relative to the start of the sequence file.
                break;
            case 0xFD:
                // *** slave copy from SeqHead ***
                local byte timestamp = ReadUByte(FTell()+1);
                if( timestamp > 0x7F ){
                    SHCommand FD(2);
                } else {
                    SHCommand FD(1);
                }
                // FD xx / FD yyyy
                // Timestamp (number of 'ticks' to wait before the next command is read, relative to tempo), variable length. If xx goes above 7F, add 8000 to it to get yyyy.
                break;
            case 0xFF:
                // FF
                // Marks the end of the channel header. 
                SHCommand FF(0);
                //breakout = 1;
                break;
            default:
                SHCommand IDK(1);
                SPrintf(warn, "\nWARNING: Unknown opcode (0x%Lx)!", op);
                Printf(warn);
                break;
        }
        itercount++;
        if( FTell() >= start+length ){
            breakout = 1;
        }
        /*
        if( itercount >= iterlimit ){
            breakout = 1;
        }
        */
    }
} ChanHead;